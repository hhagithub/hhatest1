<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog 
	xmlns="http://www.liquibase.org/xml/ns/dbchangelog" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:n0="http://www.oracle.com/xml/ns/dbchangelog-ext" 
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog 
	http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-latest.xsd">
	<changeSet id="9cd197f6e9da3e603791842f6cda22976ee61124" author="(HHA_PROD)-Generated"     >
		<n0:createOracleFunction objectName="ZATCA_XML_ID_TAXCAT_VAT" objectType="FUNCTION" ownerName="HHA_PROD"   >
			<n0:source><![CDATA[
  CREATE OR REPLACE EDITIONABLE FUNCTION "HHA_PROD"."ZATCA_XML_ID_TAXCAT_VAT" (ID_ Varchar2) RETURN CLOB IS
  l_clob         CLOB;
  r_clob         CLOB;
  v_clob varchar2(4000);
BEGIN

--3cf5ee18-ee25-44ea-a444-2c37ba7f28be  ----'||(SELECT Zatca_UUID FROM DUAL)||'
--reporting:1.0 --'||ProfileID||'
--   <cac:PaymentMeans>
--       <cbc:PaymentMeansCode>'||PaymentMeansCode||'</cbc:PaymentMeansCode>
--    </cac:PaymentMeans>
--<cbc:LineCountNumeric>'||LineCountNumeric||'</cbc:LineCountNumeric>
-- <cac:Delivery>
--   <cbc:ActualDeliveryDate>'||to_char(To_date(ActualDeliveryDate,'rrrr-mm-dd'),'rrrr-mm-dd')||'</cbc:ActualDeliveryDate>
-- </cac:Delivery>
--   '||Zatca_AdditionalDocumentReference(Invoice_ID)||'
--'||ZATCA_SupplierParty(Invoice_ID)||'

Select
'<Invoice xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:ext="urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2">
<cbc:ProfileID>'||'reporting:1.0'||'</cbc:ProfileID>
<cbc:ID>'||ID||'</cbc:ID>
<cbc:UUID>'||NVL(UUID,'8d487816-70b8-4ade-a618-9d620b73814a')||'</cbc:UUID>
<cbc:IssueDate>'||to_char(To_date(IssueDate,'rrrr-mm-dd'),'rrrr-mm-dd')||'</cbc:IssueDate>
<cbc:IssueTime>'||IssueTime||'</cbc:IssueTime>
<cbc:InvoiceTypeCode name="'||trim(InvoiceTypeName)||'">'||trim(InvoiceTypeCode)||'</cbc:InvoiceTypeCode>
<cbc:DocumentCurrencyCode>'||currencyID||'</cbc:DocumentCurrencyCode>
<cbc:TaxCurrencyCode>'||TaxCurrencyCode||'</cbc:TaxCurrencyCode>'||
(case when InvoiceTypeCode = '381' then 
  '<cac:BillingReference>
      <cac:InvoiceDocumentReference>
         <cbc:ID>'||BillingReferenceID||'</cbc:ID>
      </cac:InvoiceDocumentReference>
   </cac:BillingReference>' 
else null end)
||'<cac:AdditionalDocumentReference>
<cbc:ID>ICV</cbc:ID>
<cbc:UUID>'||ZATCA_ICV()||'</cbc:UUID>
</cac:AdditionalDocumentReference>
<cac:AdditionalDocumentReference>
<cbc:ID>PIH</cbc:ID>
<cac:Attachment>
<cbc:EmbeddedDocumentBinaryObject mimeCode="text/plain">'||ZATCA_PIH()||'</cbc:EmbeddedDocumentBinaryObject>
</cac:Attachment>
</cac:AdditionalDocumentReference>
<cac:AccountingSupplierParty>
<cac:Party>
<cac:PartyIdentification>
<cbc:ID schemeID="'||S_schemeID||'">'||S_ID||'</cbc:ID>
</cac:PartyIdentification>
<cac:PostalAddress>
<cbc:StreetName>'||S_StreetName||'</cbc:StreetName>
<cbc:BuildingNumber>'||nvl(S_BuildingNumber,'0000')||'</cbc:BuildingNumber>
<cbc:PlotIdentification>'||'0000'||'</cbc:PlotIdentification>
<cbc:CitySubdivisionName>'||S_CitySubdivisionName||'</cbc:CitySubdivisionName>
<cbc:CityName>'||S_CityName||'</cbc:CityName>
<cbc:PostalZone>'||S_PostalZone||'</cbc:PostalZone>
<cac:Country>
<cbc:IdentificationCode>'||S_IdentificationCode||'</cbc:IdentificationCode>
</cac:Country>
</cac:PostalAddress>
<cac:PartyTaxScheme>
<cbc:CompanyID>'||S_CompanyID||'</cbc:CompanyID>
<cac:TaxScheme>
<cbc:ID>'||S_ID_TAXSCHEME||'</cbc:ID>
</cac:TaxScheme>
</cac:PartyTaxScheme>
<cac:PartyLegalEntity>
<cbc:RegistrationName>'||S_RegistrationName||'</cbc:RegistrationName>
</cac:PartyLegalEntity>
</cac:Party>
</cac:AccountingSupplierParty>
<cac:AccountingCustomerParty>
<cac:Party>
<cac:PartyIdentification>
<cbc:ID schemeID="'||B_schemeID||'">'||ID||'</cbc:ID>
</cac:PartyIdentification>
<cac:PostalAddress>
<cbc:StreetName>'||B_StreetName||'</cbc:StreetName>
<cbc:BuildingNumber>'||B_BuildingNumber||'</cbc:BuildingNumber>
<cbc:CitySubdivisionName>'||B_CitySubdivisionName||'</cbc:CitySubdivisionName>
<cbc:CityName>'||B_CityName||'</cbc:CityName>
<cbc:PostalZone>'||substr(B_PostalZone,1,5)||'</cbc:PostalZone>
<cac:Country>
<cbc:IdentificationCode>'||B_IdentificationCode||'</cbc:IdentificationCode>
</cac:Country>
</cac:PostalAddress>
<cac:PartyTaxScheme>
<cac:TaxScheme>
<cbc:ID>'||B_ID_TAXSCHEME||'</cbc:ID>
</cac:TaxScheme>
</cac:PartyTaxScheme>
<cac:PartyLegalEntity>
<cbc:RegistrationName>'||B_RegistrationName||'</cbc:RegistrationName>
</cac:PartyLegalEntity>
</cac:Party>
</cac:AccountingCustomerParty>
'||
(case when InvoiceTypeCode = '381' then 
  '<cac:Delivery>
      <cbc:ActualDeliveryDate>'||ActualDeliveryDate||'</cbc:ActualDeliveryDate>
   </cac:Delivery> 
  <cac:PaymentMeans>
      <cbc:PaymentMeansCode>'||PaymentMeansCode||'</cbc:PaymentMeansCode>
      <cbc:InstructionNote>'||CREDIT_REASON||'</cbc:InstructionNote>
   </cac:PaymentMeans>' 
else null end)
||'<cac:TaxTotal>
      <cbc:TaxAmount currencyID="'||currencyID||'">'||trim(to_char(round(TaxAmount,2), 'FM99999999999990.00'))||'</cbc:TaxAmount>'
into l_clob
 From ZATCA_HHA_INVOICE
 where INVOICE_ID = ID_;


--P_ZATCA_MAPPING_MASTER_VAT  --ZATCA_HHA_INVOICELINE_VAT

   for j in ( select INVOICE_NUMBER,VATCODE,VAT_TAXABLE_AMT,CURR_VAT_TAXABLE_AMT,VAT_CAT_TAX_AMT,CURR_VAT_CAT_TAX_AMT,VAT_CAT_CODE,VAT_CAT_RATE,TAX_EXEMPT_CODE,TAX_EXEMPT_REASON
                  from ZATCA_HHA_INVOICELINE_VAT WHERE INVOICE_NUMBER = ID_ --P_ZATCA_MAPPING_MASTER_VATT@to_appidev.hha.local --where INVOICE_NUMBER = ID_ --P_ZATCA_MAPPING_MASTER_VAT@to_appidev.hha.local --where INVOICE_NUMBER = ID_

               ) loop

     r_clob := '<cac:TaxSubtotal>
         <cbc:TaxableAmount currencyID="'||j.CURR_VAT_TAXABLE_AMT||'">'||trim(to_char(round(j.VAT_TAXABLE_AMT,2), 'FM99999999999990.00'))||'</cbc:TaxableAmount>
         <cbc:TaxAmount currencyID="'||j.CURR_VAT_TAXABLE_AMT||'">'||trim(to_char(round(j.VAT_CAT_TAX_AMT,2),'FM99999999999990.00'))||'</cbc:TaxAmount>
         <cac:TaxCategory>
            <cbc:ID>'||j.VAT_CAT_CODE||'</cbc:ID>
            <cbc:Percent>'||j.VAT_CAT_RATE||'</cbc:Percent>'
            ||
(case when j.VAT_CAT_CODE='Z' then '<cbc:TaxExemptionReasonCode>'||j.TAX_EXEMPT_CODE||'</cbc:TaxExemptionReasonCode> <cbc:TaxExemptionReason>'||j.TAX_EXEMPT_REASON||'</cbc:TaxExemptionReason>' else null end)
           ||
           '<cac:TaxScheme>
               <cbc:ID>'||'VAT'||'</cbc:ID>
            </cac:TaxScheme>
         </cac:TaxCategory>
      </cac:TaxSubtotal>';
      l_clob := l_clob || ' ' ||r_clob;
     End loop;

  l_clob := l_clob || ' </cac:TaxTotal>';


Select
'<cac:TaxTotal>
      <cbc:TaxAmount currencyID="'||currencyID||'">'||trim(to_char(round(TaxAmount68,2),'FM99999999999990.00'))||'</cbc:TaxAmount>
   </cac:TaxTotal>
   <cac:LegalMonetaryTotal>
      <cbc:LineExtensionAmount currencyID="'||currencyID||'">'||trim(to_char(round(LineExtensionAmount,2),'FM99999999999990.00'))||'</cbc:LineExtensionAmount>
      <cbc:TaxExclusiveAmount currencyID="'||currencyID||'">'||trim(to_char(round(TaxExclusiveAmount,2),'FM99999999999990.00'))||'</cbc:TaxExclusiveAmount>
      <cbc:TaxInclusiveAmount currencyID="'||currencyID||'">'||trim(to_char(round(TaxInclusiveAmount,2),'FM99999999999990.00'))||'</cbc:TaxInclusiveAmount>
      <cbc:AllowanceTotalAmount currencyID="'||currencyID||'">'||trim(to_char(round(AllowanceTotalAmount,2),'FM99999999999990.00'))||'</cbc:AllowanceTotalAmount>
      <cbc:PayableAmount currencyID="'||currencyID||'">'||trim(to_char(round(PayableAmount,2),'FM99999999999990.00'))||'</cbc:PayableAmount>
   </cac:LegalMonetaryTotal>
 ' into v_clob
 From ZATCA_HHA_INVOICE
 where INVOICE_ID = ID_;

 --return v_clob;
 l_clob := l_clob || ' ' ||v_clob;

  --return l_clob;

for i in (select * From ZATCA_hha_invoiceline where INVOICE_ID = ID_) loop
r_clob := ' <cac:InvoiceLine>
      <cbc:ID>'|| i.ID ||'</cbc:ID>
      <cbc:InvoicedQuantity unitCode="'||i.unitCode||'">'||i.InvoicedQuantity ||'</cbc:InvoicedQuantity>
      <cbc:LineExtensionAmount currencyID="'||i.currencyID||'">'||trim(to_char(round(i.LineExtensionAmount,2),'FM99999999999990.00'))||'</cbc:LineExtensionAmount>
      <cac:TaxTotal>
         <cbc:TaxAmount currencyID="'||i.currencyID||'">'||trim(to_char(round(i.TaxAmount,2),'FM99999999999990.00'))||'</cbc:TaxAmount>
         <cbc:RoundingAmount currencyID="'||i.currencyID||'">'||trim(to_char(round(i.RoundingAmount,2),'FM99999999999990.00'))||'</cbc:RoundingAmount>
      </cac:TaxTotal>
      <cac:Item>
         <cbc:Name>'|| i.Name||'</cbc:Name>
         <cac:ClassifiedTaxCategory>
            <cbc:ID>'||i.ClassifiedTaxCategoryID||'</cbc:ID>
            <cbc:Percent>'||i.TaxPercent||'</cbc:Percent>
            '||(case when i.ClassifiedTaxCategoryID='ZZ' then '<cbc:TaxExemptionReasonCode>VATEX-SA-32</cbc:TaxExemptionReasonCode> <cbc:TaxExemptionReason>Export of goods</cbc:TaxExemptionReason>' else null end)||'
           <cac:TaxScheme>
               <cbc:ID>'||nvl(i.TaxSchemeID,'VAT')||'</cbc:ID>
            </cac:TaxScheme>
         </cac:ClassifiedTaxCategory>
      </cac:Item>
      <cac:Price>
         <cbc:PriceAmount currencyID="'||i.currencyID||'">'||trim(to_char(round(i.PriceAmount,2),'FM99999999999990.00'))||'</cbc:PriceAmount>'||

   (case when nvl(i.amount,0)>0 then '<cac:AllowanceCharge>
             <cbc:ChargeIndicator>false</cbc:ChargeIndicator>
             
             <cbc:Amount currencyID="SAR">'||i.amount||'</cbc:Amount>
            
         </cac:AllowanceCharge>' else null end)
              
     ||'</cac:Price>
   </cac:InvoiceLine>
 ' ;
l_clob := l_clob || ' ' ||r_clob;
End loop;

--<cbc:MultiplierFactorNumeric>'||i.Inv_Line_Alw_Perc||'</cbc:MultiplierFactorNumeric>
 --<cbc:BaseAmount currencyID="SAR">'||i.Inv_Line_Base_Amt||'</cbc:BaseAmount>

l_clob := l_clob ||'</Invoice>';

Select xmlserialize( Document  xmltype(l_clob) as clob NO INDENT ) into l_clob from dual;
l_clob := trim(regexp_replace(l_clob,'><', '> <'));

  RETURN l_clob;
  Exception When No_Data_Found then
  REturn Null;
END;
/]]></n0:source>
		</n0:createOracleFunction>
	</changeSet>
</databaseChangeLog>
